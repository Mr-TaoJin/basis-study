// http、https区别
1、信息传输安全性
2、端口号不同
3、连接方式不同
4、证书

#以下用简短的 Q & A 形式进行全文总结：

Q：HTTPS 为什么安全 ?

  A：因为 HTTPS 保证了传输安全，防止传输过程被监听、防止数据被窃取，可以确认网站的真实性。

Q：HTTPS 的传输过程是怎样的 ?

  A：客户端发起 HTTPS 请求，服务端返回证书，客户端对证书进行验证，验证通过后本地生成用于改造对称加密算法的随机数。

通过证书中的公钥对随机数进行加密传输到服务端，服务端接收后通过私钥解密得到随机数，之后的数据交互通过对称加密算法进行加解密。

Q：为什么需要证书 ?

  A：防止“中间人”攻击，同时可以为网站提供身份证明。

Q：使用 HTTPS 会被抓包吗 ?

  A：会被抓包，HTTPS 只防止用户在不知情的情况下通信被监听，如果用户主动授信，是可以构建“中间人”网络，代理软件可以对传输内容进行解密。


#http请求头有哪些 ?
  通用头标：即可用于请求，也可用于响应，是作为一个整体而不是特定资源与事务相关联。

请求头标：允许客户端传递关于自身的信息和希望的响应形式。

响应头标：服务器和于传递自身信息的响应。

实体头标：定义被传送资源的信息。即可用于请求，也可用于响应。
HTTP Request Header 请求头
Accept：指定客户端能够接收的内容类型。

Accept - Charset：浏览器可以接受的字符编码集。

Accept - Encoding：指定浏览器可以支持的web服务器返回内容压缩编码类型。

Accept - Language：浏览器可接受的语言。

Accept - Ranges：可以请求网页实体的一个或者多个子范围字段。

AuthorizationHTTP：授权的授权证书。

Cache - Control：指定请求和响应遵循的缓存机制。

Connection：表示是否需要持久连接。（HTTP 1.1默认进行持久连接）

CookieHTTP：请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。

Content - Length：请求的内容长度。

Content - Type：请求的与实体对应的MIME信息。

Date：请求发送的日期和时间。

Expect：请求的特定的服务器行为。

From：发出请求的用户的Email。

Host：指定请求的服务器的域名和端口号。

If - Match：只有请求内容与实体相匹配才有效。

If - Modified - Since：如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码。

If - None - Match：如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变。

If - Range：如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。

If - Unmodified - Since：只在实体在指定时间之后未被修改才请求成功。

Max - Forwards：限制信息通过代理和网关传送的时间。

Pragma：用来包含实现特定的指令。

Proxy - Authorization：连接到代理的授权证书。

Range：只请求实体的一部分，指定范围。

Referer：先前网页的地址，当前请求网页紧随其后, 即来路。

TE：客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。

Upgrade：向服务器指定某种传输协议以便服务器进行转换（如果支持。

User - AgentUser - Agent：的内容包含发出请求的用户信息。

Via：通知中间网关或代理服务器地址，通信协议。

Warning：关于消息实体的警告信息

HTTP Responses Header 响应头

Accept - Ranges：表明服务器是否支持指定范围请求及哪种类型的分段请求。

Age：从原始服务器到代理缓存形成的估算时间（以秒计，非负）。

Allow：对某网络资源的有效的请求行为，不允许则返回405。

Cache - Control：告诉所有的缓存机制是否可以缓存及哪种类型。

Content - Encodingweb：服务器支持的返回内容压缩编码类型。。

Content - Language：响应体的语言。

Content - Length：响应体的长度。

Content - Location：请求资源可替代的备用的另一地址。

Content - MD5：返回资源的MD5校验值。

Content - Range：在整个返回体中本部分的字节位置。

Content - Type：返回内容的MIME类型。

Date：原始服务器消息发出的时间。

ETag：请求变量的实体标签的当前值。

Expires：响应过期的日期和时间。

Last - Modified：请求资源的最后修改时间。

Location：用来重定向接收方到非请求URL的位置来完成请求或标识新的资源。

Pragma：包括实现特定的指令，它可应用到响应链上的任何接收方。

Proxy - Authenticate：它指出认证方案和可应用到代理的该URL上的参数。

refresh：应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）

Retry - After：如果实体暂时不可取，通知客户端在指定时间之后再次尝试。

Serverweb：服务器软件名称。

Set - Cookie：设置Http Cookie。

Trailer：指出头域在分块传输编码的尾部存在。

Transfer - Encoding：文件传输编码。

Vary：告诉下游代理是使用缓存响应还是从原始服务器请求。

Via：告知代理客户端响应是通过哪里发送的。

Warning：警告实体可能存在的问题。

WWW - Authenticate：表明客户端请求实体应该使用的授权方案。



#http中解决跨域的几种方法（代码实测）
一、概念
什么是跨域，跨域是浏览器安全机制，其实就是说你请求访问的域名与ajax请求地址不一致，浏览器会直接无法返回请求结果。
1.添加header请求头去解决（后端解决问题）
// Access-Control-Allow-Origin
2.jsonp解决跨域问题，只支持get请求，不支持post请求
3.使用HttpClinet转发进行转发
4.nginx的反向代理解决跨域

#HTTP的几种请求方法和用途
第一种GET方法
GET请求会向数据库获取信息，只是用来查询数据，不会修改，增加数据。使用URL传递参数，对所发送的数量有限制，一般在2000字符

第二中POST方法
POST向服务器发送数据，会改变数据的种类等资源，就像insert操作一样，会创建新的内容，大小一般没有限制，POST安全性高，POST不会被缓存

第三种PUT方法
这个方法这post很像，也时通过服务器提交数据，但他们不同的是put是指定了资源在服务器上的位置，而post没有。

第四种HEAD方法
指请求页面的首部

第五种DELETE方法
删除服务器上的某个资源
请求服务器删除指定的页面。
DELETE请求一般返回3种码
200（OK）——删除成功，同时返回已经删除的资源。
202（Accepted）——删除请求已经接受，但没有被立即执行（资源也许已经被转移到了待删除区域）。

第六种OPTIONS方法
它用于获取当前url所支持的方法，如果请求成功会有一个allow的头，包含类似“get”，“post”这样的信息。
options请求是用于请求服务器对于某些接口等资源的支持情况的，包括各种请求方法、头部的支持情况，仅作查询使用。来个栗子，

第七种TRACE方法
trace方法被用于激发一个远程的，应用层的请求回路

第八种CONNECT方法
SSL就可以利用CONNECT连接，CONNECT与GET等的不同之处就在于代理服务器对CONNECT连接处理为建立一个到目标服务器的连接而不把CONNECT请求发送出去，建立连接以后代理服务器不会对连接数据作任何修改，只是转发
通常SSL使用443端口，但代理服务器可以在80端口同时支持GET和CONNECT


#HTTP状态码分类

1** ：临时响应并需要请求者继续执行操作
100("Continue")
重要程度：中等，但（写操作时）很少用
101("Switching Protocols")
重要程度：非常低。

2**：请求成功。操作被成功接收接收并处理
200("OK")
一切正常。实体主体中的文档（若存在的话）是某资源的表示
201("Created")
重要程度：高。
当服务器依照客户端的请求创建了一个新资源时，发送此响应代码。
202("Accepted")
重要程度：中等。
客户端的请求无法或将不被实时处理。请求稍后会被处理。请求看上去是合法的，但在实际处理它时有出现问题的可能。

3**：重定向代码，需要进一步的操作以完成请求  
301("Moved Permanently")
当客户端触发的动作引起了资源URI的变化时发送此响应代码。另外，当客户端向一个资源的旧URI发送请求时，也发送此响应代码。

4**：客户端错误，请求包含语法错误或者无法完成请求
400("Bad Request")
客户端方面的问题。实体主题中的文档（若存在的话）是一个错误消息。希望客户端能够理解此错误消息，并改正问题。
404("Not Found") 和410("Gone")
当客户端所请求的URI不对应于任何资源时，发送此响应代码。404用于服务器端不知道客户端要请求哪个资源的情况；410用于服务器端知道客户端所请求的资源曾经存在，但现在已经不存在了的情况。
409("Conflict")
当客户端试图执行一个”会导致一个或多个资源处于不一致状态“的操作时，发送此响应代码。

5**：服务器错误，服务器在处理请求的过程中发生错误
500("Internal Server Error")
服务期方面的问题。实体主体中的文档（如果存在的话）是一个错误消息。该错误消息通常无济于事，因为客户端无法修复服务器方面的问题。


TCP三次握手

所谓三次握手(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。
第一次握手:
客户端发送一个TCP的SYN标志位置1的包指明客户打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。
第二次握手:
服务器发回确认包(ACK)应答。即SYN标志位和ACK标志位均为1同时，将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即X+1。
第三次握手.
客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1

TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。